/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.otus.kafka;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7616833506488115383L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Student\",\"namespace\":\"ru.otus.kafka\",\"fields\":[{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Surname\",\"type\":\"string\"},{\"name\":\"Courses\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Student> ENCODER =
      new BinaryMessageEncoder<Student>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Student> DECODER =
      new BinaryMessageDecoder<Student>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Student> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Student> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Student> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Student>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Student to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Student from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Student instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Student fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int Id;
   private java.lang.CharSequence Name;
   private java.lang.CharSequence Surname;
   private java.util.List<java.lang.CharSequence> Courses;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Student() {}

  /**
   * All-args constructor.
   * @param Id The new value for Id
   * @param Name The new value for Name
   * @param Surname The new value for Surname
   * @param Courses The new value for Courses
   */
  public Student(java.lang.Integer Id, java.lang.CharSequence Name, java.lang.CharSequence Surname, java.util.List<java.lang.CharSequence> Courses) {
    this.Id = Id;
    this.Name = Name;
    this.Surname = Surname;
    this.Courses = Courses;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Id;
    case 1: return Name;
    case 2: return Surname;
    case 3: return Courses;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Id = (java.lang.Integer)value$; break;
    case 1: Name = (java.lang.CharSequence)value$; break;
    case 2: Surname = (java.lang.CharSequence)value$; break;
    case 3: Courses = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Id' field.
   * @return The value of the 'Id' field.
   */
  public int getId() {
    return Id;
  }


  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.CharSequence getName() {
    return Name;
  }


  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'Surname' field.
   * @return The value of the 'Surname' field.
   */
  public java.lang.CharSequence getSurname() {
    return Surname;
  }


  /**
   * Sets the value of the 'Surname' field.
   * @param value the value to set.
   */
  public void setSurname(java.lang.CharSequence value) {
    this.Surname = value;
  }

  /**
   * Gets the value of the 'Courses' field.
   * @return The value of the 'Courses' field.
   */
  public java.util.List<java.lang.CharSequence> getCourses() {
    return Courses;
  }


  /**
   * Sets the value of the 'Courses' field.
   * @param value the value to set.
   */
  public void setCourses(java.util.List<java.lang.CharSequence> value) {
    this.Courses = value;
  }

  /**
   * Creates a new Student RecordBuilder.
   * @return A new Student RecordBuilder
   */
  public static ru.otus.kafka.Student.Builder newBuilder() {
    return new ru.otus.kafka.Student.Builder();
  }

  /**
   * Creates a new Student RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Student RecordBuilder
   */
  public static ru.otus.kafka.Student.Builder newBuilder(ru.otus.kafka.Student.Builder other) {
    if (other == null) {
      return new ru.otus.kafka.Student.Builder();
    } else {
      return new ru.otus.kafka.Student.Builder(other);
    }
  }

  /**
   * Creates a new Student RecordBuilder by copying an existing Student instance.
   * @param other The existing instance to copy.
   * @return A new Student RecordBuilder
   */
  public static ru.otus.kafka.Student.Builder newBuilder(ru.otus.kafka.Student other) {
    if (other == null) {
      return new ru.otus.kafka.Student.Builder();
    } else {
      return new ru.otus.kafka.Student.Builder(other);
    }
  }

  /**
   * RecordBuilder for Student instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Student>
    implements org.apache.avro.data.RecordBuilder<Student> {

    private int Id;
    private java.lang.CharSequence Name;
    private java.lang.CharSequence Surname;
    private java.util.List<java.lang.CharSequence> Courses;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.otus.kafka.Student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Surname)) {
        this.Surname = data().deepCopy(fields()[2].schema(), other.Surname);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Courses)) {
        this.Courses = data().deepCopy(fields()[3].schema(), other.Courses);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Student instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.otus.kafka.Student other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Surname)) {
        this.Surname = data().deepCopy(fields()[2].schema(), other.Surname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Courses)) {
        this.Courses = data().deepCopy(fields()[3].schema(), other.Courses);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'Id' field.
      * @return The value.
      */
    public int getId() {
      return Id;
    }


    /**
      * Sets the value of the 'Id' field.
      * @param value The value of 'Id'.
      * @return This builder.
      */
    public ru.otus.kafka.Student.Builder setId(int value) {
      validate(fields()[0], value);
      this.Id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Id' field has been set.
      * @return True if the 'Id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Id' field.
      * @return This builder.
      */
    public ru.otus.kafka.Student.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return Name;
    }


    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public ru.otus.kafka.Student.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public ru.otus.kafka.Student.Builder clearName() {
      Name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Surname' field.
      * @return The value.
      */
    public java.lang.CharSequence getSurname() {
      return Surname;
    }


    /**
      * Sets the value of the 'Surname' field.
      * @param value The value of 'Surname'.
      * @return This builder.
      */
    public ru.otus.kafka.Student.Builder setSurname(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.Surname = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Surname' field has been set.
      * @return True if the 'Surname' field has been set, false otherwise.
      */
    public boolean hasSurname() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Surname' field.
      * @return This builder.
      */
    public ru.otus.kafka.Student.Builder clearSurname() {
      Surname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Courses' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getCourses() {
      return Courses;
    }


    /**
      * Sets the value of the 'Courses' field.
      * @param value The value of 'Courses'.
      * @return This builder.
      */
    public ru.otus.kafka.Student.Builder setCourses(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.Courses = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Courses' field has been set.
      * @return True if the 'Courses' field has been set, false otherwise.
      */
    public boolean hasCourses() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Courses' field.
      * @return This builder.
      */
    public ru.otus.kafka.Student.Builder clearCourses() {
      Courses = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Student build() {
      try {
        Student record = new Student();
        record.Id = fieldSetFlags()[0] ? this.Id : (java.lang.Integer) defaultValue(fields()[0]);
        record.Name = fieldSetFlags()[1] ? this.Name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Surname = fieldSetFlags()[2] ? this.Surname : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.Courses = fieldSetFlags()[3] ? this.Courses : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Student>
    WRITER$ = (org.apache.avro.io.DatumWriter<Student>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Student>
    READER$ = (org.apache.avro.io.DatumReader<Student>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.Id);

    out.writeString(this.Name);

    out.writeString(this.Surname);

    long size0 = this.Courses.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.Courses) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Id = in.readInt();

      this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);

      this.Surname = in.readString(this.Surname instanceof Utf8 ? (Utf8)this.Surname : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.Courses;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("Courses").schema());
        this.Courses = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Id = in.readInt();
          break;

        case 1:
          this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);
          break;

        case 2:
          this.Surname = in.readString(this.Surname instanceof Utf8 ? (Utf8)this.Surname : null);
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.Courses;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("Courses").schema());
            this.Courses = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










